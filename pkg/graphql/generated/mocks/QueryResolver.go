// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import prisma "github.com/pPrecel/BeerKongServer/pkg/prisma/generated/prisma-client"

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// League provides a mock function with given fields: ctx, where
func (_m *QueryResolver) League(ctx context.Context, where prisma.LeagueWhereUniqueInput) (*prisma.League, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.League
	if rf, ok := ret.Get(0).(func(context.Context, prisma.LeagueWhereUniqueInput) *prisma.League); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.LeagueWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Leagues provides a mock function with given fields: ctx, where, orderBy, skip, after, before, first, last
func (_m *QueryResolver) Leagues(ctx context.Context, where *prisma.LeagueWhereInput, orderBy *prisma.LeagueOrderByInput, skip *int, after *string, before *string, first *int, last *int) ([]*prisma.League, error) {
	ret := _m.Called(ctx, where, orderBy, skip, after, before, first, last)

	var r0 []*prisma.League
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.LeagueWhereInput, *prisma.LeagueOrderByInput, *int, *string, *string, *int, *int) []*prisma.League); ok {
		r0 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*prisma.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.LeagueWhereInput, *prisma.LeagueOrderByInput, *int, *string, *string, *int, *int) error); ok {
		r1 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Match provides a mock function with given fields: ctx, where
func (_m *QueryResolver) Match(ctx context.Context, where prisma.MatchWhereUniqueInput) (*prisma.Match, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.Match
	if rf, ok := ret.Get(0).(func(context.Context, prisma.MatchWhereUniqueInput) *prisma.Match); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Match)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.MatchWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Matches provides a mock function with given fields: ctx, where, orderBy, skip, after, before, first, last
func (_m *QueryResolver) Matches(ctx context.Context, where *prisma.MatchWhereInput, orderBy *prisma.MatchOrderByInput, skip *int, after *string, before *string, first *int, last *int) ([]*prisma.Match, error) {
	ret := _m.Called(ctx, where, orderBy, skip, after, before, first, last)

	var r0 []*prisma.Match
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.MatchWhereInput, *prisma.MatchOrderByInput, *int, *string, *string, *int, *int) []*prisma.Match); ok {
		r0 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*prisma.Match)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.MatchWhereInput, *prisma.MatchOrderByInput, *int, *string, *string, *int, *int) error); ok {
		r1 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Team provides a mock function with given fields: ctx, where
func (_m *QueryResolver) Team(ctx context.Context, where prisma.TeamWhereUniqueInput) (*prisma.Team, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, prisma.TeamWhereUniqueInput) *prisma.Team); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.TeamWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teams provides a mock function with given fields: ctx, where, orderBy, skip, after, before, first, last
func (_m *QueryResolver) Teams(ctx context.Context, where *prisma.TeamWhereInput, orderBy *prisma.TeamOrderByInput, skip *int, after *string, before *string, first *int, last *int) ([]*prisma.Team, error) {
	ret := _m.Called(ctx, where, orderBy, skip, after, before, first, last)

	var r0 []*prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.TeamWhereInput, *prisma.TeamOrderByInput, *int, *string, *string, *int, *int) []*prisma.Team); ok {
		r0 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.TeamWhereInput, *prisma.TeamOrderByInput, *int, *string, *string, *int, *int) error); ok {
		r1 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, where
func (_m *QueryResolver) User(ctx context.Context, where prisma.UserWhereUniqueInput) (*prisma.User, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.User
	if rf, ok := ret.Get(0).(func(context.Context, prisma.UserWhereUniqueInput) *prisma.User); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.UserWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx, where, orderBy, skip, after, before, first, last
func (_m *QueryResolver) Users(ctx context.Context, where *prisma.UserWhereInput, orderBy *prisma.UserOrderByInput, skip *int, after *string, before *string, first *int, last *int) ([]*prisma.User, error) {
	ret := _m.Called(ctx, where, orderBy, skip, after, before, first, last)

	var r0 []*prisma.User
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.UserWhereInput, *prisma.UserOrderByInput, *int, *string, *string, *int, *int) []*prisma.User); ok {
		r0 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*prisma.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.UserWhereInput, *prisma.UserOrderByInput, *int, *string, *string, *int, *int) error); ok {
		r1 = rf(ctx, where, orderBy, skip, after, before, first, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
