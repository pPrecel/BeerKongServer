// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import generated "github.com/pPrecel/BeerKongServer/pkg/graphql/generated"
import mock "github.com/stretchr/testify/mock"
import prisma "github.com/pPrecel/BeerKongServer/pkg/prisma/generated/prisma-client"

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// AddUserToTeam provides a mock function with given fields: ctx, where, data
func (_m *MutationResolver) AddUserToTeam(ctx context.Context, where prisma.TeamWhereUniqueInput, data prisma.UserWhereUniqueInput) (*prisma.Team, error) {
	ret := _m.Called(ctx, where, data)

	var r0 *prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, prisma.TeamWhereUniqueInput, prisma.UserWhereUniqueInput) *prisma.Team); ok {
		r0 = rf(ctx, where, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.TeamWhereUniqueInput, prisma.UserWhereUniqueInput) error); ok {
		r1 = rf(ctx, where, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLeague provides a mock function with given fields: ctx, data
func (_m *MutationResolver) CreateLeague(ctx context.Context, data generated.LeagueCreateInput) (*prisma.League, error) {
	ret := _m.Called(ctx, data)

	var r0 *prisma.League
	if rf, ok := ret.Get(0).(func(context.Context, generated.LeagueCreateInput) *prisma.League); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generated.LeagueCreateInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMatch provides a mock function with given fields: ctx, data
func (_m *MutationResolver) CreateMatch(ctx context.Context, data generated.MatchCreateInput) (*prisma.Match, error) {
	ret := _m.Called(ctx, data)

	var r0 *prisma.Match
	if rf, ok := ret.Get(0).(func(context.Context, generated.MatchCreateInput) *prisma.Match); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Match)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generated.MatchCreateInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeam provides a mock function with given fields: ctx, data
func (_m *MutationResolver) CreateTeam(ctx context.Context, data generated.TeamCreateInput) (*prisma.Team, error) {
	ret := _m.Called(ctx, data)

	var r0 *prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, generated.TeamCreateInput) *prisma.Team); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generated.TeamCreateInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLeague provides a mock function with given fields: ctx, where
func (_m *MutationResolver) DeleteLeague(ctx context.Context, where prisma.LeagueWhereUniqueInput) (*prisma.League, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.League
	if rf, ok := ret.Get(0).(func(context.Context, prisma.LeagueWhereUniqueInput) *prisma.League); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.LeagueWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMatch provides a mock function with given fields: ctx, where
func (_m *MutationResolver) DeleteMatch(ctx context.Context, where prisma.MatchWhereUniqueInput) (*prisma.Match, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.Match
	if rf, ok := ret.Get(0).(func(context.Context, prisma.MatchWhereUniqueInput) *prisma.Match); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Match)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.MatchWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: ctx, where
func (_m *MutationResolver) DeleteTeam(ctx context.Context, where prisma.TeamWhereUniqueInput) (*prisma.Team, error) {
	ret := _m.Called(ctx, where)

	var r0 *prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, prisma.TeamWhereUniqueInput) *prisma.Team); ok {
		r0 = rf(ctx, where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.TeamWhereUniqueInput) error); ok {
		r1 = rf(ctx, where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx
func (_m *MutationResolver) DeleteUser(ctx context.Context) (*prisma.User, error) {
	ret := _m.Called(ctx)

	var r0 *prisma.User
	if rf, ok := ret.Get(0).(func(context.Context) *prisma.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndMatch provides a mock function with given fields: ctx, where, data
func (_m *MutationResolver) EndMatch(ctx context.Context, where prisma.MatchWhereUniqueInput, data generated.MatchEndInput) (*prisma.Match, error) {
	ret := _m.Called(ctx, where, data)

	var r0 *prisma.Match
	if rf, ok := ret.Get(0).(func(context.Context, prisma.MatchWhereUniqueInput, generated.MatchEndInput) *prisma.Match); ok {
		r0 = rf(ctx, where, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.Match)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, prisma.MatchWhereUniqueInput, generated.MatchEndInput) error); ok {
		r1 = rf(ctx, where, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginOrRegisterUser provides a mock function with given fields: ctx, data
func (_m *MutationResolver) LoginOrRegisterUser(ctx context.Context, data generated.UserCreateInput) (*prisma.User, error) {
	ret := _m.Called(ctx, data)

	var r0 *prisma.User
	if rf, ok := ret.Get(0).(func(context.Context, generated.UserCreateInput) *prisma.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generated.UserCreateInput) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
