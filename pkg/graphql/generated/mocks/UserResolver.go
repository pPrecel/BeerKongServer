// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import prisma "github.com/pPrecel/BeerKongServer/pkg/prisma/generated/prisma-client"

// UserResolver is an autogenerated mock type for the UserResolver type
type UserResolver struct {
	mock.Mock
}

// Leagues provides a mock function with given fields: ctx, obj
func (_m *UserResolver) Leagues(ctx context.Context, obj *prisma.User) ([]prisma.League, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.League
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.User) []prisma.League); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Matches provides a mock function with given fields: ctx, obj
func (_m *UserResolver) Matches(ctx context.Context, obj *prisma.User) ([]prisma.Match, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.Match
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.User) []prisma.Match); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.Match)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OwnedLeagues provides a mock function with given fields: ctx, obj
func (_m *UserResolver) OwnedLeagues(ctx context.Context, obj *prisma.User) ([]prisma.League, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.League
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.User) []prisma.League); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OwnedTeams provides a mock function with given fields: ctx, obj
func (_m *UserResolver) OwnedTeams(ctx context.Context, obj *prisma.User) ([]prisma.Team, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.User) []prisma.Team); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teams provides a mock function with given fields: ctx, obj
func (_m *UserResolver) Teams(ctx context.Context, obj *prisma.User) ([]prisma.Team, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.User) []prisma.Team); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.User) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
