// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import prisma "github.com/pPrecel/BeerKongServer/pkg/prisma/generated/prisma-client"

// LeagueResolver is an autogenerated mock type for the LeagueResolver type
type LeagueResolver struct {
	mock.Mock
}

// Owner provides a mock function with given fields: ctx, obj
func (_m *LeagueResolver) Owner(ctx context.Context, obj *prisma.League) (*prisma.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 *prisma.User
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.League) *prisma.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prisma.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.League) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teams provides a mock function with given fields: ctx, obj
func (_m *LeagueResolver) Teams(ctx context.Context, obj *prisma.League) ([]prisma.Team, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.Team
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.League) []prisma.Team); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.League) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx, obj
func (_m *LeagueResolver) Users(ctx context.Context, obj *prisma.League) ([]prisma.User, error) {
	ret := _m.Called(ctx, obj)

	var r0 []prisma.User
	if rf, ok := ret.Get(0).(func(context.Context, *prisma.League) []prisma.User); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prisma.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *prisma.League) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
